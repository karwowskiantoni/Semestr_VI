from functions import plot, gaussian_function, domain, trapezium_function
import matplotlib.pyplot as plt

plt.title("satiety")
plot(lambda x: trapezium_function(x, 0, 0, 70, 130), domain(0, 902))
plot(lambda x: trapezium_function(x, 100, 170, 200, 250), domain(0, 902))
plot(lambda x: trapezium_function(x, 200, 300, 400, 600), domain(0, 902))
plot(lambda x: trapezium_function(x, 500, 550, 700, 800), domain(0, 902))
plot(lambda x: trapezium_function(x, 700, 850, 902, 902), domain(0, 902))
plt.legend(["very low calorie", "low calorie", "medium calorie", "high calorie", "extremely high calorie"])
plt.xlabel("calorie [kcal]")
plt.ylabel("membership")
plt.show()

plt.title("wateriness")
plot(lambda x: trapezium_function(x, 0, 0, 7, 20), domain(0, 100))
plot(lambda x: trapezium_function(x, 15, 25, 40, 50), domain(0, 100))
plot(lambda x: trapezium_function(x, 30, 60, 80, 90), domain(0, 100))
plot(lambda x: trapezium_function(x, 80, 90, 100, 100), domain(0, 100))
plt.legend(["almost without water", "hydrating", "water rich", "entirely water"])
plt.xlabel("water [g]")
plt.ylabel("membership")
plt.show()

plt.title("sweetness")
plot(lambda x: trapezium_function(x, 0, 0, 1, 2), domain(0, 20))
plot(lambda x: trapezium_function(x, 0.5, 2, 6, 8), domain(0, 20))
plot(lambda x: trapezium_function(x, 5, 9, 13, 15), domain(0, 20))
plot(lambda x: trapezium_function(x, 13, 16, 20, 20), domain(0, 20))
plt.legend(["not sweet", "sweet", "very sweet", "made of sugar"])
plt.xlabel("sugar [g]")
plt.ylabel("membership")
plt.show()

plt.title("fatness")
plot(lambda x: trapezium_function(x, 0, 0, 5, 10), domain(0, 100))
plot(lambda x: trapezium_function(x, 6, 12, 18, 20), domain(0, 100))
plot(lambda x: trapezium_function(x, 15, 25, 30, 35), domain(0, 100))
plot(lambda x: trapezium_function(x, 30, 40, 50, 60), domain(0, 100))
plot(lambda x: trapezium_function(x, 40, 60, 100, 100), domain(0, 100))
plt.legend(["almost without fat", "little fat", "fat", "high fat", "extremely fat"])
plt.xlabel("fat [g]")
plt.ylabel("membership")
plt.show()

plt.title("healthiness")
plot(lambda x: gaussian_function(x, 0, 0.2), domain(0, 1))
plot(lambda x: gaussian_function(x, 0.6, 0.13), domain(0, 1))
plot(lambda x: gaussian_function(x, 1, 0.10), domain(0, 1))
plt.legend(["unhealthy", "healthy", "healthful"])
plt.xlabel("healthiness coefficient")
plt.ylabel("membership")
plt.show()

plt.title("digestion speed")
plot(lambda x: gaussian_function(x, 0, 0.1), domain(0, 1))
plot(lambda x: gaussian_function(x, 0.3, 0.1), domain(0, 1))
plot(lambda x: gaussian_function(x, 0.5, 0.1), domain(0, 1))
plot(lambda x: gaussian_function(x, 0.7, 0.1), domain(0, 1))
plot(lambda x: gaussian_function(x, 1, 0.1), domain(0, 1))
plt.legend(["sluggish", "slow", "standard", "fast", "rapid"])
plt.xlabel("digestion speed coefficient")
plt.ylabel("membership")
plt.show()

plt.title("adaptation for diabetics")
plot(lambda x: gaussian_function(x, 0, 0.1), domain(0, 1))
plot(lambda x: gaussian_function(x, 0.4, 0.1), domain(0, 1))
plot(lambda x: gaussian_function(x, 1, 0.2), domain(0, 1))
plt.legend(["avoidable", "neutral", "destined for diabetics"])
plt.xlabel("diabetic coefficient")
plt.ylabel("membership")
plt.show()

plt.title("anti-depressives")
plot(lambda x: trapezium_function(x, 0, 0, 30, 50), domain(0, 250))
plot(lambda x: trapezium_function(x, 40, 60, 80, 100), domain(0, 250))
plot(lambda x: trapezium_function(x, 80, 100, 110, 120), domain(0, 250))
plot(lambda x: trapezium_function(x, 100, 120, 250, 250), domain(0, 250))
plt.legend(["no impact on depression", "little impact on depression", "impactful on depression", "highly antidepressant"])
plt.xlabel("vitamin d (ug)")
plt.ylabel("membership")
plt.show()

plt.title("protein content")
plot(lambda x: trapezium_function(x, 0, 0, 5, 10), domain(0, 88.32))
plot(lambda x: trapezium_function(x, 7, 12, 20, 30), domain(0, 88.32))
plot(lambda x: trapezium_function(x, 20, 30, 88.32, 88.32), domain(0, 88.32))
plt.legend(["little protein", "mediocre protein", "high protein"])
plt.xlabel("protein (g)")
plt.ylabel("membership")
plt.show()

plt.title("absorption")
plot(lambda x: trapezium_function(x, 80, 80, 83, 85), domain(80, 99.8))
plot(lambda x: trapezium_function(x, 80, 85, 94, 97), domain(80, 99.8))
plot(lambda x: trapezium_function(x, 95, 97, 99.8, 99.8), domain(80, 99.8))
plt.legend(["little digested", "mediocre digested", "fully digested"])
plt.xlabel("ash in food (g)")
plt.ylabel("membership")
plt.show()

plt.title("global quantifier")
plot(lambda x: trapezium_function(x, 0, 0, 1700, 2000), domain(0, 8792))
plot(lambda x: trapezium_function(x, 1500, 2000, 7000, 7500), domain(0, 8792))
plot(lambda x: trapezium_function(x, 7000, 7500, 8792, 8792), domain(0, 8792))
plt.legend(["minority", "average number", "majority"])
plt.xlabel("subset size")
plt.ylabel("membership")
plt.show()
